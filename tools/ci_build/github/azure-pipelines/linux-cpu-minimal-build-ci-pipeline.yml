# This CI has 3 major steps
# 1. Build full ORT, install the full ORT python wheel and use it to generate ort format test models
#    and include ops config file for step 3
# 2. Build minimal ORT including all the kernels and disable exceptions.
#    This step is build only to safe-guard the --disable_exceptions option.
# 3. Build minimal ORT include only the kernels using the include ops config file from step 1,
#    and the models from <repo root>/onnxruntime/test/testdata/, run UT, and use onnx_test_runner to
#    test the ort format models generated in step 1.
#    Exceptions are enabled in this step to help debugging in case of CI failure.
jobs:
- job: Linux_CPU_Minimal_Build_E2E
  timeoutInMinutes: 120
  workspace:
    clean: all
  pool: Linux-CPU
  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: onnxruntimeregistry
      command: login
      addPipelineData: false
  - task: CmdLine@2
    displayName: Build full onnxruntime and generate ORT format test files
    inputs:
      script: |
        # Create a folder for all test data
        mkdir -p $HOME/.test_data
        echo $ANDROID_HOME
        ls -ls $ANDROID_HOME/
      workingDirectory: $(Build.SourcesDirectory)
  - task: Docker@2
    displayName: logout
    inputs:
      containerRegistry: onnxruntimeregistry
      command: logout
      addPipelineData: false
  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()

  - template: templates/component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
